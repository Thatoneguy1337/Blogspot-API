
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Followers
 * 
 */
export type Followers = $Result.DefaultSelection<Prisma.$FollowersPayload>
/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Threads
 * 
 */
export type Threads = $Result.DefaultSelection<Prisma.$ThreadsPayload>
/**
 * Model Posts
 * 
 */
export type Posts = $Result.DefaultSelection<Prisma.$PostsPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Followers
 * const followers = await prisma.followers.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Followers
   * const followers = await prisma.followers.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.followers`: Exposes CRUD operations for the **Followers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Followers
    * const followers = await prisma.followers.findMany()
    * ```
    */
  get followers(): Prisma.FollowersDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs>;

  /**
   * `prisma.threads`: Exposes CRUD operations for the **Threads** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Threads
    * const threads = await prisma.threads.findMany()
    * ```
    */
  get threads(): Prisma.ThreadsDelegate<ExtArgs>;

  /**
   * `prisma.posts`: Exposes CRUD operations for the **Posts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.posts.findMany()
    * ```
    */
  get posts(): Prisma.PostsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Followers: 'Followers',
    Users: 'Users',
    Threads: 'Threads',
    Posts: 'Posts'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'followers' | 'users' | 'threads' | 'posts'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Followers: {
        payload: Prisma.$FollowersPayload<ExtArgs>
        fields: Prisma.FollowersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FollowersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FollowersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          findFirst: {
            args: Prisma.FollowersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FollowersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          findMany: {
            args: Prisma.FollowersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>[]
          }
          create: {
            args: Prisma.FollowersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          createMany: {
            args: Prisma.FollowersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FollowersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          update: {
            args: Prisma.FollowersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          deleteMany: {
            args: Prisma.FollowersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FollowersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FollowersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FollowersPayload>
          }
          aggregate: {
            args: Prisma.FollowersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFollowers>
          }
          groupBy: {
            args: Prisma.FollowersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FollowersGroupByOutputType>[]
          }
          count: {
            args: Prisma.FollowersCountArgs<ExtArgs>,
            result: $Utils.Optional<FollowersCountAggregateOutputType> | number
          }
        }
      }
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Threads: {
        payload: Prisma.$ThreadsPayload<ExtArgs>
        fields: Prisma.ThreadsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ThreadsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ThreadsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload>
          }
          findFirst: {
            args: Prisma.ThreadsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ThreadsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload>
          }
          findMany: {
            args: Prisma.ThreadsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload>[]
          }
          create: {
            args: Prisma.ThreadsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload>
          }
          createMany: {
            args: Prisma.ThreadsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ThreadsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload>
          }
          update: {
            args: Prisma.ThreadsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload>
          }
          deleteMany: {
            args: Prisma.ThreadsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ThreadsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ThreadsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ThreadsPayload>
          }
          aggregate: {
            args: Prisma.ThreadsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateThreads>
          }
          groupBy: {
            args: Prisma.ThreadsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ThreadsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ThreadsCountArgs<ExtArgs>,
            result: $Utils.Optional<ThreadsCountAggregateOutputType> | number
          }
        }
      }
      Posts: {
        payload: Prisma.$PostsPayload<ExtArgs>
        fields: Prisma.PostsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload>
          }
          findFirst: {
            args: Prisma.PostsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload>
          }
          findMany: {
            args: Prisma.PostsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload>[]
          }
          create: {
            args: Prisma.PostsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload>
          }
          createMany: {
            args: Prisma.PostsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PostsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload>
          }
          update: {
            args: Prisma.PostsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload>
          }
          deleteMany: {
            args: Prisma.PostsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PostsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PostsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostsPayload>
          }
          aggregate: {
            args: Prisma.PostsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePosts>
          }
          groupBy: {
            args: Prisma.PostsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostsCountArgs<ExtArgs>,
            result: $Utils.Optional<PostsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    posts: number
    threads: number
    followers: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    posts?: boolean | UsersCountOutputTypeCountPostsArgs
    threads?: boolean | UsersCountOutputTypeCountThreadsArgs
    followers?: boolean | UsersCountOutputTypeCountFollowersArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PostsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountThreadsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ThreadsWhereInput
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FollowersWhereInput
  }



  /**
   * Count Type PostsCountOutputType
   */

  export type PostsCountOutputType = {
    threads: number
  }

  export type PostsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    threads?: boolean | PostsCountOutputTypeCountThreadsArgs
  }

  // Custom InputTypes

  /**
   * PostsCountOutputType without action
   */
  export type PostsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostsCountOutputType
     */
    select?: PostsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PostsCountOutputType without action
   */
  export type PostsCountOutputTypeCountThreadsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ThreadsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Followers
   */

  export type AggregateFollowers = {
    _count: FollowersCountAggregateOutputType | null
    _avg: FollowersAvgAggregateOutputType | null
    _sum: FollowersSumAggregateOutputType | null
    _min: FollowersMinAggregateOutputType | null
    _max: FollowersMaxAggregateOutputType | null
  }

  export type FollowersAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type FollowersSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type FollowersMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    is_following: boolean | null
  }

  export type FollowersMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    is_following: boolean | null
  }

  export type FollowersCountAggregateOutputType = {
    id: number
    user_id: number
    is_following: number
    _all: number
  }


  export type FollowersAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type FollowersSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type FollowersMinAggregateInputType = {
    id?: true
    user_id?: true
    is_following?: true
  }

  export type FollowersMaxAggregateInputType = {
    id?: true
    user_id?: true
    is_following?: true
  }

  export type FollowersCountAggregateInputType = {
    id?: true
    user_id?: true
    is_following?: true
    _all?: true
  }

  export type FollowersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Followers to aggregate.
     */
    where?: FollowersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FollowersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Followers
    **/
    _count?: true | FollowersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FollowersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FollowersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FollowersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FollowersMaxAggregateInputType
  }

  export type GetFollowersAggregateType<T extends FollowersAggregateArgs> = {
        [P in keyof T & keyof AggregateFollowers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFollowers[P]>
      : GetScalarType<T[P], AggregateFollowers[P]>
  }




  export type FollowersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: FollowersWhereInput
    orderBy?: FollowersOrderByWithAggregationInput | FollowersOrderByWithAggregationInput[]
    by: FollowersScalarFieldEnum[] | FollowersScalarFieldEnum
    having?: FollowersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FollowersCountAggregateInputType | true
    _avg?: FollowersAvgAggregateInputType
    _sum?: FollowersSumAggregateInputType
    _min?: FollowersMinAggregateInputType
    _max?: FollowersMaxAggregateInputType
  }

  export type FollowersGroupByOutputType = {
    id: number
    user_id: number
    is_following: boolean
    _count: FollowersCountAggregateOutputType | null
    _avg: FollowersAvgAggregateOutputType | null
    _sum: FollowersSumAggregateOutputType | null
    _min: FollowersMinAggregateOutputType | null
    _max: FollowersMaxAggregateOutputType | null
  }

  type GetFollowersGroupByPayload<T extends FollowersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FollowersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FollowersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FollowersGroupByOutputType[P]>
            : GetScalarType<T[P], FollowersGroupByOutputType[P]>
        }
      >
    >


  export type FollowersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    is_following?: boolean
    user?: boolean | Followers$userArgs<ExtArgs>
  }, ExtArgs["result"]["followers"]>

  export type FollowersSelectScalar = {
    id?: boolean
    user_id?: boolean
    is_following?: boolean
  }

  export type FollowersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | Followers$userArgs<ExtArgs>
  }


  export type $FollowersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Followers"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      user_id: number
      is_following: boolean
    }, ExtArgs["result"]["followers"]>
    composites: {}
  }


  type FollowersGetPayload<S extends boolean | null | undefined | FollowersDefaultArgs> = $Result.GetResult<Prisma.$FollowersPayload, S>

  type FollowersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<FollowersFindManyArgs, 'select' | 'include'> & {
      select?: FollowersCountAggregateInputType | true
    }

  export interface FollowersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Followers'], meta: { name: 'Followers' } }
    /**
     * Find zero or one Followers that matches the filter.
     * @param {FollowersFindUniqueArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FollowersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FollowersFindUniqueArgs<ExtArgs>>
    ): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Followers that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FollowersFindUniqueOrThrowArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FollowersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersFindFirstArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FollowersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowersFindFirstArgs<ExtArgs>>
    ): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Followers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersFindFirstOrThrowArgs} args - Arguments to find a Followers
     * @example
     * // Get one Followers
     * const followers = await prisma.followers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FollowersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Followers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Followers
     * const followers = await prisma.followers.findMany()
     * 
     * // Get first 10 Followers
     * const followers = await prisma.followers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const followersWithIdOnly = await prisma.followers.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FollowersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Followers.
     * @param {FollowersCreateArgs} args - Arguments to create a Followers.
     * @example
     * // Create one Followers
     * const Followers = await prisma.followers.create({
     *   data: {
     *     // ... data to create a Followers
     *   }
     * })
     * 
    **/
    create<T extends FollowersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FollowersCreateArgs<ExtArgs>>
    ): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Followers.
     *     @param {FollowersCreateManyArgs} args - Arguments to create many Followers.
     *     @example
     *     // Create many Followers
     *     const followers = await prisma.followers.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FollowersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Followers.
     * @param {FollowersDeleteArgs} args - Arguments to delete one Followers.
     * @example
     * // Delete one Followers
     * const Followers = await prisma.followers.delete({
     *   where: {
     *     // ... filter to delete one Followers
     *   }
     * })
     * 
    **/
    delete<T extends FollowersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FollowersDeleteArgs<ExtArgs>>
    ): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Followers.
     * @param {FollowersUpdateArgs} args - Arguments to update one Followers.
     * @example
     * // Update one Followers
     * const followers = await prisma.followers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FollowersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FollowersUpdateArgs<ExtArgs>>
    ): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Followers.
     * @param {FollowersDeleteManyArgs} args - Arguments to filter Followers to delete.
     * @example
     * // Delete a few Followers
     * const { count } = await prisma.followers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FollowersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FollowersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Followers
     * const followers = await prisma.followers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FollowersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FollowersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Followers.
     * @param {FollowersUpsertArgs} args - Arguments to update or create a Followers.
     * @example
     * // Update or create a Followers
     * const followers = await prisma.followers.upsert({
     *   create: {
     *     // ... data to create a Followers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Followers we want to update
     *   }
     * })
    **/
    upsert<T extends FollowersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FollowersUpsertArgs<ExtArgs>>
    ): Prisma__FollowersClient<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersCountArgs} args - Arguments to filter Followers to count.
     * @example
     * // Count the number of Followers
     * const count = await prisma.followers.count({
     *   where: {
     *     // ... the filter for the Followers we want to count
     *   }
     * })
    **/
    count<T extends FollowersCountArgs>(
      args?: Subset<T, FollowersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FollowersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FollowersAggregateArgs>(args: Subset<T, FollowersAggregateArgs>): Prisma.PrismaPromise<GetFollowersAggregateType<T>>

    /**
     * Group by Followers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FollowersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FollowersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FollowersGroupByArgs['orderBy'] }
        : { orderBy?: FollowersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FollowersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFollowersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Followers model
   */
  readonly fields: FollowersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Followers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FollowersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Followers$userArgs<ExtArgs> = {}>(args?: Subset<T, Followers$userArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Followers model
   */ 
  interface FollowersFieldRefs {
    readonly id: FieldRef<"Followers", 'Int'>
    readonly user_id: FieldRef<"Followers", 'Int'>
    readonly is_following: FieldRef<"Followers", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Followers findUnique
   */
  export type FollowersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where: FollowersWhereUniqueInput
  }


  /**
   * Followers findUniqueOrThrow
   */
  export type FollowersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where: FollowersWhereUniqueInput
  }


  /**
   * Followers findFirst
   */
  export type FollowersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where?: FollowersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Followers.
     */
    cursor?: FollowersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Followers.
     */
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }


  /**
   * Followers findFirstOrThrow
   */
  export type FollowersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where?: FollowersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Followers.
     */
    cursor?: FollowersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Followers.
     */
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }


  /**
   * Followers findMany
   */
  export type FollowersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter, which Followers to fetch.
     */
    where?: FollowersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Followers to fetch.
     */
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Followers.
     */
    cursor?: FollowersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Followers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Followers.
     */
    skip?: number
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }


  /**
   * Followers create
   */
  export type FollowersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * The data needed to create a Followers.
     */
    data: XOR<FollowersCreateInput, FollowersUncheckedCreateInput>
  }


  /**
   * Followers createMany
   */
  export type FollowersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Followers.
     */
    data: FollowersCreateManyInput | FollowersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Followers update
   */
  export type FollowersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * The data needed to update a Followers.
     */
    data: XOR<FollowersUpdateInput, FollowersUncheckedUpdateInput>
    /**
     * Choose, which Followers to update.
     */
    where: FollowersWhereUniqueInput
  }


  /**
   * Followers updateMany
   */
  export type FollowersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Followers.
     */
    data: XOR<FollowersUpdateManyMutationInput, FollowersUncheckedUpdateManyInput>
    /**
     * Filter which Followers to update
     */
    where?: FollowersWhereInput
  }


  /**
   * Followers upsert
   */
  export type FollowersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * The filter to search for the Followers to update in case it exists.
     */
    where: FollowersWhereUniqueInput
    /**
     * In case the Followers found by the `where` argument doesn't exist, create a new Followers with this data.
     */
    create: XOR<FollowersCreateInput, FollowersUncheckedCreateInput>
    /**
     * In case the Followers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FollowersUpdateInput, FollowersUncheckedUpdateInput>
  }


  /**
   * Followers delete
   */
  export type FollowersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    /**
     * Filter which Followers to delete.
     */
    where: FollowersWhereUniqueInput
  }


  /**
   * Followers deleteMany
   */
  export type FollowersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Followers to delete
     */
    where?: FollowersWhereInput
  }


  /**
   * Followers.user
   */
  export type Followers$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }


  /**
   * Followers without action
   */
  export type FollowersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
  }



  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    fullname: string | null
    username: string | null
    created_at: Date | null
    email: string | null
    user_img: string | null
    bg_img: string | null
    password: string | null
    sc_number: string | null
    telephone: string | null
    birthdate: string | null
    description: string | null
    is_banned: boolean | null
    is_active: boolean | null
    is_moderator: boolean | null
    zip_code: string | null
    state: string | null
    city: string | null
    street: string | null
    number: string | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    fullname: string | null
    username: string | null
    created_at: Date | null
    email: string | null
    user_img: string | null
    bg_img: string | null
    password: string | null
    sc_number: string | null
    telephone: string | null
    birthdate: string | null
    description: string | null
    is_banned: boolean | null
    is_active: boolean | null
    is_moderator: boolean | null
    zip_code: string | null
    state: string | null
    city: string | null
    street: string | null
    number: string | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    fullname: number
    username: number
    created_at: number
    email: number
    user_img: number
    bg_img: number
    password: number
    sc_number: number
    telephone: number
    birthdate: number
    description: number
    is_banned: number
    is_active: number
    is_moderator: number
    zip_code: number
    state: number
    city: number
    street: number
    number: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    created_at?: true
    email?: true
    user_img?: true
    bg_img?: true
    password?: true
    sc_number?: true
    telephone?: true
    birthdate?: true
    description?: true
    is_banned?: true
    is_active?: true
    is_moderator?: true
    zip_code?: true
    state?: true
    city?: true
    street?: true
    number?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    created_at?: true
    email?: true
    user_img?: true
    bg_img?: true
    password?: true
    sc_number?: true
    telephone?: true
    birthdate?: true
    description?: true
    is_banned?: true
    is_active?: true
    is_moderator?: true
    zip_code?: true
    state?: true
    city?: true
    street?: true
    number?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    fullname?: true
    username?: true
    created_at?: true
    email?: true
    user_img?: true
    bg_img?: true
    password?: true
    sc_number?: true
    telephone?: true
    birthdate?: true
    description?: true
    is_banned?: true
    is_active?: true
    is_moderator?: true
    zip_code?: true
    state?: true
    city?: true
    street?: true
    number?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    fullname: string
    username: string
    created_at: Date
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullname?: boolean
    username?: boolean
    created_at?: boolean
    email?: boolean
    user_img?: boolean
    bg_img?: boolean
    password?: boolean
    sc_number?: boolean
    telephone?: boolean
    birthdate?: boolean
    description?: boolean
    is_banned?: boolean
    is_active?: boolean
    is_moderator?: boolean
    zip_code?: boolean
    state?: boolean
    city?: boolean
    street?: boolean
    number?: boolean
    posts?: boolean | Users$postsArgs<ExtArgs>
    threads?: boolean | Users$threadsArgs<ExtArgs>
    followers?: boolean | Users$followersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    fullname?: boolean
    username?: boolean
    created_at?: boolean
    email?: boolean
    user_img?: boolean
    bg_img?: boolean
    password?: boolean
    sc_number?: boolean
    telephone?: boolean
    birthdate?: boolean
    description?: boolean
    is_banned?: boolean
    is_active?: boolean
    is_moderator?: boolean
    zip_code?: boolean
    state?: boolean
    city?: boolean
    street?: boolean
    number?: boolean
  }

  export type UsersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    posts?: boolean | Users$postsArgs<ExtArgs>
    threads?: boolean | Users$threadsArgs<ExtArgs>
    followers?: boolean | Users$followersArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UsersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      posts: Prisma.$PostsPayload<ExtArgs>[]
      threads: Prisma.$ThreadsPayload<ExtArgs>[]
      followers: Prisma.$FollowersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      fullname: string
      username: string
      created_at: Date
      email: string
      user_img: string
      bg_img: string
      password: string
      sc_number: string
      telephone: string
      birthdate: string
      description: string
      is_banned: boolean
      is_active: boolean
      is_moderator: boolean
      zip_code: string
      state: string
      city: string
      street: string
      number: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UsersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends UsersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersCreateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UsersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends UsersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends UsersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>
    ): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    posts<T extends Users$postsArgs<ExtArgs> = {}>(args?: Subset<T, Users$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'findMany'> | Null>;

    threads<T extends Users$threadsArgs<ExtArgs> = {}>(args?: Subset<T, Users$threadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'findMany'> | Null>;

    followers<T extends Users$followersArgs<ExtArgs> = {}>(args?: Subset<T, Users$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FollowersPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Users model
   */ 
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly fullname: FieldRef<"Users", 'String'>
    readonly username: FieldRef<"Users", 'String'>
    readonly created_at: FieldRef<"Users", 'DateTime'>
    readonly email: FieldRef<"Users", 'String'>
    readonly user_img: FieldRef<"Users", 'String'>
    readonly bg_img: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly sc_number: FieldRef<"Users", 'String'>
    readonly telephone: FieldRef<"Users", 'String'>
    readonly birthdate: FieldRef<"Users", 'String'>
    readonly description: FieldRef<"Users", 'String'>
    readonly is_banned: FieldRef<"Users", 'Boolean'>
    readonly is_active: FieldRef<"Users", 'Boolean'>
    readonly is_moderator: FieldRef<"Users", 'Boolean'>
    readonly zip_code: FieldRef<"Users", 'String'>
    readonly state: FieldRef<"Users", 'String'>
    readonly city: FieldRef<"Users", 'String'>
    readonly street: FieldRef<"Users", 'String'>
    readonly number: FieldRef<"Users", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }


  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
  }


  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }


  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }


  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
  }


  /**
   * Users.posts
   */
  export type Users$postsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    where?: PostsWhereInput
    orderBy?: PostsOrderByWithRelationInput | PostsOrderByWithRelationInput[]
    cursor?: PostsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostsScalarFieldEnum | PostsScalarFieldEnum[]
  }


  /**
   * Users.threads
   */
  export type Users$threadsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    where?: ThreadsWhereInput
    orderBy?: ThreadsOrderByWithRelationInput | ThreadsOrderByWithRelationInput[]
    cursor?: ThreadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }


  /**
   * Users.followers
   */
  export type Users$followersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Followers
     */
    select?: FollowersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FollowersInclude<ExtArgs> | null
    where?: FollowersWhereInput
    orderBy?: FollowersOrderByWithRelationInput | FollowersOrderByWithRelationInput[]
    cursor?: FollowersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FollowersScalarFieldEnum | FollowersScalarFieldEnum[]
  }


  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
  }



  /**
   * Model Threads
   */

  export type AggregateThreads = {
    _count: ThreadsCountAggregateOutputType | null
    _avg: ThreadsAvgAggregateOutputType | null
    _sum: ThreadsSumAggregateOutputType | null
    _min: ThreadsMinAggregateOutputType | null
    _max: ThreadsMaxAggregateOutputType | null
  }

  export type ThreadsAvgAggregateOutputType = {
    id: number | null
    post_id: number | null
    user_id: number | null
  }

  export type ThreadsSumAggregateOutputType = {
    id: number | null
    post_id: number | null
    user_id: number | null
  }

  export type ThreadsMinAggregateOutputType = {
    id: number | null
    created_at: Date | null
    edited: boolean | null
    description: string | null
    comment_img: string | null
    post_id: number | null
    user_id: number | null
  }

  export type ThreadsMaxAggregateOutputType = {
    id: number | null
    created_at: Date | null
    edited: boolean | null
    description: string | null
    comment_img: string | null
    post_id: number | null
    user_id: number | null
  }

  export type ThreadsCountAggregateOutputType = {
    id: number
    created_at: number
    edited: number
    description: number
    comment_img: number
    post_id: number
    user_id: number
    _all: number
  }


  export type ThreadsAvgAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
  }

  export type ThreadsSumAggregateInputType = {
    id?: true
    post_id?: true
    user_id?: true
  }

  export type ThreadsMinAggregateInputType = {
    id?: true
    created_at?: true
    edited?: true
    description?: true
    comment_img?: true
    post_id?: true
    user_id?: true
  }

  export type ThreadsMaxAggregateInputType = {
    id?: true
    created_at?: true
    edited?: true
    description?: true
    comment_img?: true
    post_id?: true
    user_id?: true
  }

  export type ThreadsCountAggregateInputType = {
    id?: true
    created_at?: true
    edited?: true
    description?: true
    comment_img?: true
    post_id?: true
    user_id?: true
    _all?: true
  }

  export type ThreadsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Threads to aggregate.
     */
    where?: ThreadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadsOrderByWithRelationInput | ThreadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ThreadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Threads
    **/
    _count?: true | ThreadsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ThreadsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ThreadsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ThreadsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ThreadsMaxAggregateInputType
  }

  export type GetThreadsAggregateType<T extends ThreadsAggregateArgs> = {
        [P in keyof T & keyof AggregateThreads]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateThreads[P]>
      : GetScalarType<T[P], AggregateThreads[P]>
  }




  export type ThreadsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ThreadsWhereInput
    orderBy?: ThreadsOrderByWithAggregationInput | ThreadsOrderByWithAggregationInput[]
    by: ThreadsScalarFieldEnum[] | ThreadsScalarFieldEnum
    having?: ThreadsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ThreadsCountAggregateInputType | true
    _avg?: ThreadsAvgAggregateInputType
    _sum?: ThreadsSumAggregateInputType
    _min?: ThreadsMinAggregateInputType
    _max?: ThreadsMaxAggregateInputType
  }

  export type ThreadsGroupByOutputType = {
    id: number
    created_at: Date
    edited: boolean | null
    description: string | null
    comment_img: string | null
    post_id: number | null
    user_id: number | null
    _count: ThreadsCountAggregateOutputType | null
    _avg: ThreadsAvgAggregateOutputType | null
    _sum: ThreadsSumAggregateOutputType | null
    _min: ThreadsMinAggregateOutputType | null
    _max: ThreadsMaxAggregateOutputType | null
  }

  type GetThreadsGroupByPayload<T extends ThreadsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ThreadsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ThreadsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ThreadsGroupByOutputType[P]>
            : GetScalarType<T[P], ThreadsGroupByOutputType[P]>
        }
      >
    >


  export type ThreadsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    created_at?: boolean
    edited?: boolean
    description?: boolean
    comment_img?: boolean
    post_id?: boolean
    user_id?: boolean
    posts?: boolean | Threads$postsArgs<ExtArgs>
    user?: boolean | Threads$userArgs<ExtArgs>
  }, ExtArgs["result"]["threads"]>

  export type ThreadsSelectScalar = {
    id?: boolean
    created_at?: boolean
    edited?: boolean
    description?: boolean
    comment_img?: boolean
    post_id?: boolean
    user_id?: boolean
  }

  export type ThreadsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    posts?: boolean | Threads$postsArgs<ExtArgs>
    user?: boolean | Threads$userArgs<ExtArgs>
  }


  export type $ThreadsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Threads"
    objects: {
      posts: Prisma.$PostsPayload<ExtArgs> | null
      user: Prisma.$UsersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetResult<{
      id: number
      created_at: Date
      edited: boolean | null
      description: string | null
      comment_img: string | null
      post_id: number | null
      user_id: number | null
    }, ExtArgs["result"]["threads"]>
    composites: {}
  }


  type ThreadsGetPayload<S extends boolean | null | undefined | ThreadsDefaultArgs> = $Result.GetResult<Prisma.$ThreadsPayload, S>

  type ThreadsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ThreadsFindManyArgs, 'select' | 'include'> & {
      select?: ThreadsCountAggregateInputType | true
    }

  export interface ThreadsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Threads'], meta: { name: 'Threads' } }
    /**
     * Find zero or one Threads that matches the filter.
     * @param {ThreadsFindUniqueArgs} args - Arguments to find a Threads
     * @example
     * // Get one Threads
     * const threads = await prisma.threads.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ThreadsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ThreadsFindUniqueArgs<ExtArgs>>
    ): Prisma__ThreadsClient<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Threads that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ThreadsFindUniqueOrThrowArgs} args - Arguments to find a Threads
     * @example
     * // Get one Threads
     * const threads = await prisma.threads.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ThreadsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreadsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ThreadsClient<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Threads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadsFindFirstArgs} args - Arguments to find a Threads
     * @example
     * // Get one Threads
     * const threads = await prisma.threads.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ThreadsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreadsFindFirstArgs<ExtArgs>>
    ): Prisma__ThreadsClient<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Threads that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadsFindFirstOrThrowArgs} args - Arguments to find a Threads
     * @example
     * // Get one Threads
     * const threads = await prisma.threads.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ThreadsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreadsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ThreadsClient<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Threads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Threads
     * const threads = await prisma.threads.findMany()
     * 
     * // Get first 10 Threads
     * const threads = await prisma.threads.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const threadsWithIdOnly = await prisma.threads.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ThreadsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreadsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Threads.
     * @param {ThreadsCreateArgs} args - Arguments to create a Threads.
     * @example
     * // Create one Threads
     * const Threads = await prisma.threads.create({
     *   data: {
     *     // ... data to create a Threads
     *   }
     * })
     * 
    **/
    create<T extends ThreadsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ThreadsCreateArgs<ExtArgs>>
    ): Prisma__ThreadsClient<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Threads.
     *     @param {ThreadsCreateManyArgs} args - Arguments to create many Threads.
     *     @example
     *     // Create many Threads
     *     const threads = await prisma.threads.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ThreadsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreadsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Threads.
     * @param {ThreadsDeleteArgs} args - Arguments to delete one Threads.
     * @example
     * // Delete one Threads
     * const Threads = await prisma.threads.delete({
     *   where: {
     *     // ... filter to delete one Threads
     *   }
     * })
     * 
    **/
    delete<T extends ThreadsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ThreadsDeleteArgs<ExtArgs>>
    ): Prisma__ThreadsClient<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Threads.
     * @param {ThreadsUpdateArgs} args - Arguments to update one Threads.
     * @example
     * // Update one Threads
     * const threads = await prisma.threads.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ThreadsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ThreadsUpdateArgs<ExtArgs>>
    ): Prisma__ThreadsClient<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Threads.
     * @param {ThreadsDeleteManyArgs} args - Arguments to filter Threads to delete.
     * @example
     * // Delete a few Threads
     * const { count } = await prisma.threads.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ThreadsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ThreadsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Threads
     * const threads = await prisma.threads.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ThreadsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ThreadsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Threads.
     * @param {ThreadsUpsertArgs} args - Arguments to update or create a Threads.
     * @example
     * // Update or create a Threads
     * const threads = await prisma.threads.upsert({
     *   create: {
     *     // ... data to create a Threads
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Threads we want to update
     *   }
     * })
    **/
    upsert<T extends ThreadsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ThreadsUpsertArgs<ExtArgs>>
    ): Prisma__ThreadsClient<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadsCountArgs} args - Arguments to filter Threads to count.
     * @example
     * // Count the number of Threads
     * const count = await prisma.threads.count({
     *   where: {
     *     // ... the filter for the Threads we want to count
     *   }
     * })
    **/
    count<T extends ThreadsCountArgs>(
      args?: Subset<T, ThreadsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ThreadsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ThreadsAggregateArgs>(args: Subset<T, ThreadsAggregateArgs>): Prisma.PrismaPromise<GetThreadsAggregateType<T>>

    /**
     * Group by Threads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ThreadsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ThreadsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ThreadsGroupByArgs['orderBy'] }
        : { orderBy?: ThreadsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ThreadsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetThreadsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Threads model
   */
  readonly fields: ThreadsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Threads.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ThreadsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    posts<T extends Threads$postsArgs<ExtArgs> = {}>(args?: Subset<T, Threads$postsArgs<ExtArgs>>): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    user<T extends Threads$userArgs<ExtArgs> = {}>(args?: Subset<T, Threads$userArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Threads model
   */ 
  interface ThreadsFieldRefs {
    readonly id: FieldRef<"Threads", 'Int'>
    readonly created_at: FieldRef<"Threads", 'DateTime'>
    readonly edited: FieldRef<"Threads", 'Boolean'>
    readonly description: FieldRef<"Threads", 'String'>
    readonly comment_img: FieldRef<"Threads", 'String'>
    readonly post_id: FieldRef<"Threads", 'Int'>
    readonly user_id: FieldRef<"Threads", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Threads findUnique
   */
  export type ThreadsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * Filter, which Threads to fetch.
     */
    where: ThreadsWhereUniqueInput
  }


  /**
   * Threads findUniqueOrThrow
   */
  export type ThreadsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * Filter, which Threads to fetch.
     */
    where: ThreadsWhereUniqueInput
  }


  /**
   * Threads findFirst
   */
  export type ThreadsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * Filter, which Threads to fetch.
     */
    where?: ThreadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadsOrderByWithRelationInput | ThreadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threads.
     */
    cursor?: ThreadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threads.
     */
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }


  /**
   * Threads findFirstOrThrow
   */
  export type ThreadsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * Filter, which Threads to fetch.
     */
    where?: ThreadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadsOrderByWithRelationInput | ThreadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Threads.
     */
    cursor?: ThreadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Threads.
     */
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }


  /**
   * Threads findMany
   */
  export type ThreadsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * Filter, which Threads to fetch.
     */
    where?: ThreadsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Threads to fetch.
     */
    orderBy?: ThreadsOrderByWithRelationInput | ThreadsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Threads.
     */
    cursor?: ThreadsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Threads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Threads.
     */
    skip?: number
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }


  /**
   * Threads create
   */
  export type ThreadsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * The data needed to create a Threads.
     */
    data?: XOR<ThreadsCreateInput, ThreadsUncheckedCreateInput>
  }


  /**
   * Threads createMany
   */
  export type ThreadsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Threads.
     */
    data: ThreadsCreateManyInput | ThreadsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Threads update
   */
  export type ThreadsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * The data needed to update a Threads.
     */
    data: XOR<ThreadsUpdateInput, ThreadsUncheckedUpdateInput>
    /**
     * Choose, which Threads to update.
     */
    where: ThreadsWhereUniqueInput
  }


  /**
   * Threads updateMany
   */
  export type ThreadsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Threads.
     */
    data: XOR<ThreadsUpdateManyMutationInput, ThreadsUncheckedUpdateManyInput>
    /**
     * Filter which Threads to update
     */
    where?: ThreadsWhereInput
  }


  /**
   * Threads upsert
   */
  export type ThreadsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * The filter to search for the Threads to update in case it exists.
     */
    where: ThreadsWhereUniqueInput
    /**
     * In case the Threads found by the `where` argument doesn't exist, create a new Threads with this data.
     */
    create: XOR<ThreadsCreateInput, ThreadsUncheckedCreateInput>
    /**
     * In case the Threads was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ThreadsUpdateInput, ThreadsUncheckedUpdateInput>
  }


  /**
   * Threads delete
   */
  export type ThreadsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    /**
     * Filter which Threads to delete.
     */
    where: ThreadsWhereUniqueInput
  }


  /**
   * Threads deleteMany
   */
  export type ThreadsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Threads to delete
     */
    where?: ThreadsWhereInput
  }


  /**
   * Threads.posts
   */
  export type Threads$postsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    where?: PostsWhereInput
  }


  /**
   * Threads.user
   */
  export type Threads$userArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
  }


  /**
   * Threads without action
   */
  export type ThreadsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
  }



  /**
   * Model Posts
   */

  export type AggregatePosts = {
    _count: PostsCountAggregateOutputType | null
    _avg: PostsAvgAggregateOutputType | null
    _sum: PostsSumAggregateOutputType | null
    _min: PostsMinAggregateOutputType | null
    _max: PostsMaxAggregateOutputType | null
  }

  export type PostsAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    likes: number | null
    dislikes: number | null
  }

  export type PostsSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    likes: number | null
    dislikes: number | null
  }

  export type PostsMinAggregateOutputType = {
    id: number | null
    posted_at: Date | null
    user_id: number | null
    description: string | null
    post_img: string | null
    likes: number | null
    dislikes: number | null
  }

  export type PostsMaxAggregateOutputType = {
    id: number | null
    posted_at: Date | null
    user_id: number | null
    description: string | null
    post_img: string | null
    likes: number | null
    dislikes: number | null
  }

  export type PostsCountAggregateOutputType = {
    id: number
    posted_at: number
    user_id: number
    description: number
    post_img: number
    likes: number
    dislikes: number
    _all: number
  }


  export type PostsAvgAggregateInputType = {
    id?: true
    user_id?: true
    likes?: true
    dislikes?: true
  }

  export type PostsSumAggregateInputType = {
    id?: true
    user_id?: true
    likes?: true
    dislikes?: true
  }

  export type PostsMinAggregateInputType = {
    id?: true
    posted_at?: true
    user_id?: true
    description?: true
    post_img?: true
    likes?: true
    dislikes?: true
  }

  export type PostsMaxAggregateInputType = {
    id?: true
    posted_at?: true
    user_id?: true
    description?: true
    post_img?: true
    likes?: true
    dislikes?: true
  }

  export type PostsCountAggregateInputType = {
    id?: true
    posted_at?: true
    user_id?: true
    description?: true
    post_img?: true
    likes?: true
    dislikes?: true
    _all?: true
  }

  export type PostsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to aggregate.
     */
    where?: PostsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostsOrderByWithRelationInput | PostsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostsMaxAggregateInputType
  }

  export type GetPostsAggregateType<T extends PostsAggregateArgs> = {
        [P in keyof T & keyof AggregatePosts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosts[P]>
      : GetScalarType<T[P], AggregatePosts[P]>
  }




  export type PostsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PostsWhereInput
    orderBy?: PostsOrderByWithAggregationInput | PostsOrderByWithAggregationInput[]
    by: PostsScalarFieldEnum[] | PostsScalarFieldEnum
    having?: PostsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostsCountAggregateInputType | true
    _avg?: PostsAvgAggregateInputType
    _sum?: PostsSumAggregateInputType
    _min?: PostsMinAggregateInputType
    _max?: PostsMaxAggregateInputType
  }

  export type PostsGroupByOutputType = {
    id: number
    posted_at: Date
    user_id: number
    description: string | null
    post_img: string | null
    likes: number
    dislikes: number
    _count: PostsCountAggregateOutputType | null
    _avg: PostsAvgAggregateOutputType | null
    _sum: PostsSumAggregateOutputType | null
    _min: PostsMinAggregateOutputType | null
    _max: PostsMaxAggregateOutputType | null
  }

  type GetPostsGroupByPayload<T extends PostsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostsGroupByOutputType[P]>
            : GetScalarType<T[P], PostsGroupByOutputType[P]>
        }
      >
    >


  export type PostsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    posted_at?: boolean
    user_id?: boolean
    description?: boolean
    post_img?: boolean
    likes?: boolean
    dislikes?: boolean
    user_post?: boolean | UsersDefaultArgs<ExtArgs>
    threads?: boolean | Posts$threadsArgs<ExtArgs>
    _count?: boolean | PostsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["posts"]>

  export type PostsSelectScalar = {
    id?: boolean
    posted_at?: boolean
    user_id?: boolean
    description?: boolean
    post_img?: boolean
    likes?: boolean
    dislikes?: boolean
  }

  export type PostsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user_post?: boolean | UsersDefaultArgs<ExtArgs>
    threads?: boolean | Posts$threadsArgs<ExtArgs>
    _count?: boolean | PostsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PostsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Posts"
    objects: {
      user_post: Prisma.$UsersPayload<ExtArgs>
      threads: Prisma.$ThreadsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: number
      posted_at: Date
      user_id: number
      description: string | null
      post_img: string | null
      likes: number
      dislikes: number
    }, ExtArgs["result"]["posts"]>
    composites: {}
  }


  type PostsGetPayload<S extends boolean | null | undefined | PostsDefaultArgs> = $Result.GetResult<Prisma.$PostsPayload, S>

  type PostsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PostsFindManyArgs, 'select' | 'include'> & {
      select?: PostsCountAggregateInputType | true
    }

  export interface PostsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Posts'], meta: { name: 'Posts' } }
    /**
     * Find zero or one Posts that matches the filter.
     * @param {PostsFindUniqueArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PostsFindUniqueArgs<ExtArgs>>
    ): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Posts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostsFindUniqueOrThrowArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsFindFirstArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PostsFindFirstArgs<ExtArgs>>
    ): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Posts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsFindFirstOrThrowArgs} args - Arguments to find a Posts
     * @example
     * // Get one Posts
     * const posts = await prisma.posts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.posts.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.posts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postsWithIdOnly = await prisma.posts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Posts.
     * @param {PostsCreateArgs} args - Arguments to create a Posts.
     * @example
     * // Create one Posts
     * const Posts = await prisma.posts.create({
     *   data: {
     *     // ... data to create a Posts
     *   }
     * })
     * 
    **/
    create<T extends PostsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PostsCreateArgs<ExtArgs>>
    ): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Posts.
     *     @param {PostsCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const posts = await prisma.posts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Posts.
     * @param {PostsDeleteArgs} args - Arguments to delete one Posts.
     * @example
     * // Delete one Posts
     * const Posts = await prisma.posts.delete({
     *   where: {
     *     // ... filter to delete one Posts
     *   }
     * })
     * 
    **/
    delete<T extends PostsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PostsDeleteArgs<ExtArgs>>
    ): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Posts.
     * @param {PostsUpdateArgs} args - Arguments to update one Posts.
     * @example
     * // Update one Posts
     * const posts = await prisma.posts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PostsUpdateArgs<ExtArgs>>
    ): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostsDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.posts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const posts = await prisma.posts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PostsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Posts.
     * @param {PostsUpsertArgs} args - Arguments to update or create a Posts.
     * @example
     * // Update or create a Posts
     * const posts = await prisma.posts.upsert({
     *   create: {
     *     // ... data to create a Posts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Posts we want to update
     *   }
     * })
    **/
    upsert<T extends PostsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PostsUpsertArgs<ExtArgs>>
    ): Prisma__PostsClient<$Result.GetResult<Prisma.$PostsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.posts.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostsCountArgs>(
      args?: Subset<T, PostsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostsAggregateArgs>(args: Subset<T, PostsAggregateArgs>): Prisma.PrismaPromise<GetPostsAggregateType<T>>

    /**
     * Group by Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostsGroupByArgs['orderBy'] }
        : { orderBy?: PostsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Posts model
   */
  readonly fields: PostsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Posts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user_post<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    threads<T extends Posts$threadsArgs<ExtArgs> = {}>(args?: Subset<T, Posts$threadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ThreadsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Posts model
   */ 
  interface PostsFieldRefs {
    readonly id: FieldRef<"Posts", 'Int'>
    readonly posted_at: FieldRef<"Posts", 'DateTime'>
    readonly user_id: FieldRef<"Posts", 'Int'>
    readonly description: FieldRef<"Posts", 'String'>
    readonly post_img: FieldRef<"Posts", 'String'>
    readonly likes: FieldRef<"Posts", 'Int'>
    readonly dislikes: FieldRef<"Posts", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Posts findUnique
   */
  export type PostsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where: PostsWhereUniqueInput
  }


  /**
   * Posts findUniqueOrThrow
   */
  export type PostsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where: PostsWhereUniqueInput
  }


  /**
   * Posts findFirst
   */
  export type PostsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostsOrderByWithRelationInput | PostsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostsScalarFieldEnum | PostsScalarFieldEnum[]
  }


  /**
   * Posts findFirstOrThrow
   */
  export type PostsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostsOrderByWithRelationInput | PostsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostsScalarFieldEnum | PostsScalarFieldEnum[]
  }


  /**
   * Posts findMany
   */
  export type PostsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostsOrderByWithRelationInput | PostsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostsScalarFieldEnum | PostsScalarFieldEnum[]
  }


  /**
   * Posts create
   */
  export type PostsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * The data needed to create a Posts.
     */
    data: XOR<PostsCreateInput, PostsUncheckedCreateInput>
  }


  /**
   * Posts createMany
   */
  export type PostsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostsCreateManyInput | PostsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Posts update
   */
  export type PostsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * The data needed to update a Posts.
     */
    data: XOR<PostsUpdateInput, PostsUncheckedUpdateInput>
    /**
     * Choose, which Posts to update.
     */
    where: PostsWhereUniqueInput
  }


  /**
   * Posts updateMany
   */
  export type PostsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostsUpdateManyMutationInput, PostsUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostsWhereInput
  }


  /**
   * Posts upsert
   */
  export type PostsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * The filter to search for the Posts to update in case it exists.
     */
    where: PostsWhereUniqueInput
    /**
     * In case the Posts found by the `where` argument doesn't exist, create a new Posts with this data.
     */
    create: XOR<PostsCreateInput, PostsUncheckedCreateInput>
    /**
     * In case the Posts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostsUpdateInput, PostsUncheckedUpdateInput>
  }


  /**
   * Posts delete
   */
  export type PostsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
    /**
     * Filter which Posts to delete.
     */
    where: PostsWhereUniqueInput
  }


  /**
   * Posts deleteMany
   */
  export type PostsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostsWhereInput
  }


  /**
   * Posts.threads
   */
  export type Posts$threadsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Threads
     */
    select?: ThreadsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ThreadsInclude<ExtArgs> | null
    where?: ThreadsWhereInput
    orderBy?: ThreadsOrderByWithRelationInput | ThreadsOrderByWithRelationInput[]
    cursor?: ThreadsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ThreadsScalarFieldEnum | ThreadsScalarFieldEnum[]
  }


  /**
   * Posts without action
   */
  export type PostsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Posts
     */
    select?: PostsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PostsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const FollowersScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    is_following: 'is_following'
  };

  export type FollowersScalarFieldEnum = (typeof FollowersScalarFieldEnum)[keyof typeof FollowersScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    fullname: 'fullname',
    username: 'username',
    created_at: 'created_at',
    email: 'email',
    user_img: 'user_img',
    bg_img: 'bg_img',
    password: 'password',
    sc_number: 'sc_number',
    telephone: 'telephone',
    birthdate: 'birthdate',
    description: 'description',
    is_banned: 'is_banned',
    is_active: 'is_active',
    is_moderator: 'is_moderator',
    zip_code: 'zip_code',
    state: 'state',
    city: 'city',
    street: 'street',
    number: 'number'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ThreadsScalarFieldEnum: {
    id: 'id',
    created_at: 'created_at',
    edited: 'edited',
    description: 'description',
    comment_img: 'comment_img',
    post_id: 'post_id',
    user_id: 'user_id'
  };

  export type ThreadsScalarFieldEnum = (typeof ThreadsScalarFieldEnum)[keyof typeof ThreadsScalarFieldEnum]


  export const PostsScalarFieldEnum: {
    id: 'id',
    posted_at: 'posted_at',
    user_id: 'user_id',
    description: 'description',
    post_img: 'post_img',
    likes: 'likes',
    dislikes: 'dislikes'
  };

  export type PostsScalarFieldEnum = (typeof PostsScalarFieldEnum)[keyof typeof PostsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type FollowersWhereInput = {
    AND?: FollowersWhereInput | FollowersWhereInput[]
    OR?: FollowersWhereInput[]
    NOT?: FollowersWhereInput | FollowersWhereInput[]
    id?: IntFilter<"Followers"> | number
    user_id?: IntFilter<"Followers"> | number
    is_following?: BoolFilter<"Followers"> | boolean
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type FollowersOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_following?: SortOrder
    user?: UsersOrderByWithRelationInput
  }

  export type FollowersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: number
    AND?: FollowersWhereInput | FollowersWhereInput[]
    OR?: FollowersWhereInput[]
    NOT?: FollowersWhereInput | FollowersWhereInput[]
    is_following?: BoolFilter<"Followers"> | boolean
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "id" | "user_id">

  export type FollowersOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_following?: SortOrder
    _count?: FollowersCountOrderByAggregateInput
    _avg?: FollowersAvgOrderByAggregateInput
    _max?: FollowersMaxOrderByAggregateInput
    _min?: FollowersMinOrderByAggregateInput
    _sum?: FollowersSumOrderByAggregateInput
  }

  export type FollowersScalarWhereWithAggregatesInput = {
    AND?: FollowersScalarWhereWithAggregatesInput | FollowersScalarWhereWithAggregatesInput[]
    OR?: FollowersScalarWhereWithAggregatesInput[]
    NOT?: FollowersScalarWhereWithAggregatesInput | FollowersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Followers"> | number
    user_id?: IntWithAggregatesFilter<"Followers"> | number
    is_following?: BoolWithAggregatesFilter<"Followers"> | boolean
  }

  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    fullname?: StringFilter<"Users"> | string
    username?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    email?: StringFilter<"Users"> | string
    user_img?: StringFilter<"Users"> | string
    bg_img?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    sc_number?: StringFilter<"Users"> | string
    telephone?: StringFilter<"Users"> | string
    birthdate?: StringFilter<"Users"> | string
    description?: StringFilter<"Users"> | string
    is_banned?: BoolFilter<"Users"> | boolean
    is_active?: BoolFilter<"Users"> | boolean
    is_moderator?: BoolFilter<"Users"> | boolean
    zip_code?: StringFilter<"Users"> | string
    state?: StringFilter<"Users"> | string
    city?: StringFilter<"Users"> | string
    street?: StringFilter<"Users"> | string
    number?: StringFilter<"Users"> | string
    posts?: PostsListRelationFilter
    threads?: ThreadsListRelationFilter
    followers?: FollowersListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    user_img?: SortOrder
    bg_img?: SortOrder
    password?: SortOrder
    sc_number?: SortOrder
    telephone?: SortOrder
    birthdate?: SortOrder
    description?: SortOrder
    is_banned?: SortOrder
    is_active?: SortOrder
    is_moderator?: SortOrder
    zip_code?: SortOrder
    state?: SortOrder
    city?: SortOrder
    street?: SortOrder
    number?: SortOrder
    posts?: PostsOrderByRelationAggregateInput
    threads?: ThreadsOrderByRelationAggregateInput
    followers?: FollowersOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    sc_number?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    fullname?: StringFilter<"Users"> | string
    username?: StringFilter<"Users"> | string
    created_at?: DateTimeFilter<"Users"> | Date | string
    user_img?: StringFilter<"Users"> | string
    bg_img?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    telephone?: StringFilter<"Users"> | string
    birthdate?: StringFilter<"Users"> | string
    description?: StringFilter<"Users"> | string
    is_banned?: BoolFilter<"Users"> | boolean
    is_active?: BoolFilter<"Users"> | boolean
    is_moderator?: BoolFilter<"Users"> | boolean
    zip_code?: StringFilter<"Users"> | string
    state?: StringFilter<"Users"> | string
    city?: StringFilter<"Users"> | string
    street?: StringFilter<"Users"> | string
    number?: StringFilter<"Users"> | string
    posts?: PostsListRelationFilter
    threads?: ThreadsListRelationFilter
    followers?: FollowersListRelationFilter
  }, "id" | "email" | "sc_number">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    user_img?: SortOrder
    bg_img?: SortOrder
    password?: SortOrder
    sc_number?: SortOrder
    telephone?: SortOrder
    birthdate?: SortOrder
    description?: SortOrder
    is_banned?: SortOrder
    is_active?: SortOrder
    is_moderator?: SortOrder
    zip_code?: SortOrder
    state?: SortOrder
    city?: SortOrder
    street?: SortOrder
    number?: SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    fullname?: StringWithAggregatesFilter<"Users"> | string
    username?: StringWithAggregatesFilter<"Users"> | string
    created_at?: DateTimeWithAggregatesFilter<"Users"> | Date | string
    email?: StringWithAggregatesFilter<"Users"> | string
    user_img?: StringWithAggregatesFilter<"Users"> | string
    bg_img?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    sc_number?: StringWithAggregatesFilter<"Users"> | string
    telephone?: StringWithAggregatesFilter<"Users"> | string
    birthdate?: StringWithAggregatesFilter<"Users"> | string
    description?: StringWithAggregatesFilter<"Users"> | string
    is_banned?: BoolWithAggregatesFilter<"Users"> | boolean
    is_active?: BoolWithAggregatesFilter<"Users"> | boolean
    is_moderator?: BoolWithAggregatesFilter<"Users"> | boolean
    zip_code?: StringWithAggregatesFilter<"Users"> | string
    state?: StringWithAggregatesFilter<"Users"> | string
    city?: StringWithAggregatesFilter<"Users"> | string
    street?: StringWithAggregatesFilter<"Users"> | string
    number?: StringWithAggregatesFilter<"Users"> | string
  }

  export type ThreadsWhereInput = {
    AND?: ThreadsWhereInput | ThreadsWhereInput[]
    OR?: ThreadsWhereInput[]
    NOT?: ThreadsWhereInput | ThreadsWhereInput[]
    id?: IntFilter<"Threads"> | number
    created_at?: DateTimeFilter<"Threads"> | Date | string
    edited?: BoolNullableFilter<"Threads"> | boolean | null
    description?: StringNullableFilter<"Threads"> | string | null
    comment_img?: StringNullableFilter<"Threads"> | string | null
    post_id?: IntNullableFilter<"Threads"> | number | null
    user_id?: IntNullableFilter<"Threads"> | number | null
    posts?: XOR<PostsNullableRelationFilter, PostsWhereInput> | null
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }

  export type ThreadsOrderByWithRelationInput = {
    id?: SortOrder
    created_at?: SortOrder
    edited?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    comment_img?: SortOrderInput | SortOrder
    post_id?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    posts?: PostsOrderByWithRelationInput
    user?: UsersOrderByWithRelationInput
  }

  export type ThreadsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ThreadsWhereInput | ThreadsWhereInput[]
    OR?: ThreadsWhereInput[]
    NOT?: ThreadsWhereInput | ThreadsWhereInput[]
    created_at?: DateTimeFilter<"Threads"> | Date | string
    edited?: BoolNullableFilter<"Threads"> | boolean | null
    description?: StringNullableFilter<"Threads"> | string | null
    comment_img?: StringNullableFilter<"Threads"> | string | null
    post_id?: IntNullableFilter<"Threads"> | number | null
    user_id?: IntNullableFilter<"Threads"> | number | null
    posts?: XOR<PostsNullableRelationFilter, PostsWhereInput> | null
    user?: XOR<UsersNullableRelationFilter, UsersWhereInput> | null
  }, "id">

  export type ThreadsOrderByWithAggregationInput = {
    id?: SortOrder
    created_at?: SortOrder
    edited?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    comment_img?: SortOrderInput | SortOrder
    post_id?: SortOrderInput | SortOrder
    user_id?: SortOrderInput | SortOrder
    _count?: ThreadsCountOrderByAggregateInput
    _avg?: ThreadsAvgOrderByAggregateInput
    _max?: ThreadsMaxOrderByAggregateInput
    _min?: ThreadsMinOrderByAggregateInput
    _sum?: ThreadsSumOrderByAggregateInput
  }

  export type ThreadsScalarWhereWithAggregatesInput = {
    AND?: ThreadsScalarWhereWithAggregatesInput | ThreadsScalarWhereWithAggregatesInput[]
    OR?: ThreadsScalarWhereWithAggregatesInput[]
    NOT?: ThreadsScalarWhereWithAggregatesInput | ThreadsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Threads"> | number
    created_at?: DateTimeWithAggregatesFilter<"Threads"> | Date | string
    edited?: BoolNullableWithAggregatesFilter<"Threads"> | boolean | null
    description?: StringNullableWithAggregatesFilter<"Threads"> | string | null
    comment_img?: StringNullableWithAggregatesFilter<"Threads"> | string | null
    post_id?: IntNullableWithAggregatesFilter<"Threads"> | number | null
    user_id?: IntNullableWithAggregatesFilter<"Threads"> | number | null
  }

  export type PostsWhereInput = {
    AND?: PostsWhereInput | PostsWhereInput[]
    OR?: PostsWhereInput[]
    NOT?: PostsWhereInput | PostsWhereInput[]
    id?: IntFilter<"Posts"> | number
    posted_at?: DateTimeFilter<"Posts"> | Date | string
    user_id?: IntFilter<"Posts"> | number
    description?: StringNullableFilter<"Posts"> | string | null
    post_img?: StringNullableFilter<"Posts"> | string | null
    likes?: IntFilter<"Posts"> | number
    dislikes?: IntFilter<"Posts"> | number
    user_post?: XOR<UsersRelationFilter, UsersWhereInput>
    threads?: ThreadsListRelationFilter
  }

  export type PostsOrderByWithRelationInput = {
    id?: SortOrder
    posted_at?: SortOrder
    user_id?: SortOrder
    description?: SortOrderInput | SortOrder
    post_img?: SortOrderInput | SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    user_post?: UsersOrderByWithRelationInput
    threads?: ThreadsOrderByRelationAggregateInput
  }

  export type PostsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PostsWhereInput | PostsWhereInput[]
    OR?: PostsWhereInput[]
    NOT?: PostsWhereInput | PostsWhereInput[]
    posted_at?: DateTimeFilter<"Posts"> | Date | string
    user_id?: IntFilter<"Posts"> | number
    description?: StringNullableFilter<"Posts"> | string | null
    post_img?: StringNullableFilter<"Posts"> | string | null
    likes?: IntFilter<"Posts"> | number
    dislikes?: IntFilter<"Posts"> | number
    user_post?: XOR<UsersRelationFilter, UsersWhereInput>
    threads?: ThreadsListRelationFilter
  }, "id">

  export type PostsOrderByWithAggregationInput = {
    id?: SortOrder
    posted_at?: SortOrder
    user_id?: SortOrder
    description?: SortOrderInput | SortOrder
    post_img?: SortOrderInput | SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
    _count?: PostsCountOrderByAggregateInput
    _avg?: PostsAvgOrderByAggregateInput
    _max?: PostsMaxOrderByAggregateInput
    _min?: PostsMinOrderByAggregateInput
    _sum?: PostsSumOrderByAggregateInput
  }

  export type PostsScalarWhereWithAggregatesInput = {
    AND?: PostsScalarWhereWithAggregatesInput | PostsScalarWhereWithAggregatesInput[]
    OR?: PostsScalarWhereWithAggregatesInput[]
    NOT?: PostsScalarWhereWithAggregatesInput | PostsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Posts"> | number
    posted_at?: DateTimeWithAggregatesFilter<"Posts"> | Date | string
    user_id?: IntWithAggregatesFilter<"Posts"> | number
    description?: StringNullableWithAggregatesFilter<"Posts"> | string | null
    post_img?: StringNullableWithAggregatesFilter<"Posts"> | string | null
    likes?: IntWithAggregatesFilter<"Posts"> | number
    dislikes?: IntWithAggregatesFilter<"Posts"> | number
  }

  export type FollowersCreateInput = {
    is_following: boolean
    user?: UsersCreateNestedOneWithoutFollowersInput
  }

  export type FollowersUncheckedCreateInput = {
    id?: number
    user_id: number
    is_following: boolean
  }

  export type FollowersUpdateInput = {
    is_following?: BoolFieldUpdateOperationsInput | boolean
    user?: UsersUpdateOneWithoutFollowersNestedInput
  }

  export type FollowersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    is_following?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FollowersCreateManyInput = {
    id?: number
    user_id: number
    is_following: boolean
  }

  export type FollowersUpdateManyMutationInput = {
    is_following?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FollowersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    is_following?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UsersCreateInput = {
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    posts?: PostsCreateNestedManyWithoutUser_postInput
    threads?: ThreadsCreateNestedManyWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    posts?: PostsUncheckedCreateNestedManyWithoutUser_postInput
    threads?: ThreadsUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersUpdateInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    posts?: PostsUpdateManyWithoutUser_postNestedInput
    threads?: ThreadsUpdateManyWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    posts?: PostsUncheckedUpdateManyWithoutUser_postNestedInput
    threads?: ThreadsUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
  }

  export type UsersUpdateManyMutationInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
  }

  export type ThreadsCreateInput = {
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    posts?: PostsCreateNestedOneWithoutThreadsInput
    user?: UsersCreateNestedOneWithoutThreadsInput
  }

  export type ThreadsUncheckedCreateInput = {
    id?: number
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    post_id?: number | null
    user_id?: number | null
  }

  export type ThreadsUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostsUpdateOneWithoutThreadsNestedInput
    user?: UsersUpdateOneWithoutThreadsNestedInput
  }

  export type ThreadsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    post_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ThreadsCreateManyInput = {
    id?: number
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    post_id?: number | null
    user_id?: number | null
  }

  export type ThreadsUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ThreadsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    post_id?: NullableIntFieldUpdateOperationsInput | number | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PostsCreateInput = {
    posted_at?: Date | string
    description?: string | null
    post_img?: string | null
    likes: number
    dislikes: number
    user_post: UsersCreateNestedOneWithoutPostsInput
    threads?: ThreadsCreateNestedManyWithoutPostsInput
  }

  export type PostsUncheckedCreateInput = {
    id?: number
    posted_at?: Date | string
    user_id: number
    description?: string | null
    post_img?: string | null
    likes: number
    dislikes: number
    threads?: ThreadsUncheckedCreateNestedManyWithoutPostsInput
  }

  export type PostsUpdateInput = {
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    user_post?: UsersUpdateOneRequiredWithoutPostsNestedInput
    threads?: ThreadsUpdateManyWithoutPostsNestedInput
  }

  export type PostsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    threads?: ThreadsUncheckedUpdateManyWithoutPostsNestedInput
  }

  export type PostsCreateManyInput = {
    id?: number
    posted_at?: Date | string
    user_id: number
    description?: string | null
    post_img?: string | null
    likes: number
    dislikes: number
  }

  export type PostsUpdateManyMutationInput = {
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
  }

  export type PostsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UsersNullableRelationFilter = {
    is?: UsersWhereInput | null
    isNot?: UsersWhereInput | null
  }

  export type FollowersCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_following?: SortOrder
  }

  export type FollowersAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type FollowersMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_following?: SortOrder
  }

  export type FollowersMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    is_following?: SortOrder
  }

  export type FollowersSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PostsListRelationFilter = {
    every?: PostsWhereInput
    some?: PostsWhereInput
    none?: PostsWhereInput
  }

  export type ThreadsListRelationFilter = {
    every?: ThreadsWhereInput
    some?: ThreadsWhereInput
    none?: ThreadsWhereInput
  }

  export type FollowersListRelationFilter = {
    every?: FollowersWhereInput
    some?: FollowersWhereInput
    none?: FollowersWhereInput
  }

  export type PostsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ThreadsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FollowersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    user_img?: SortOrder
    bg_img?: SortOrder
    password?: SortOrder
    sc_number?: SortOrder
    telephone?: SortOrder
    birthdate?: SortOrder
    description?: SortOrder
    is_banned?: SortOrder
    is_active?: SortOrder
    is_moderator?: SortOrder
    zip_code?: SortOrder
    state?: SortOrder
    city?: SortOrder
    street?: SortOrder
    number?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    user_img?: SortOrder
    bg_img?: SortOrder
    password?: SortOrder
    sc_number?: SortOrder
    telephone?: SortOrder
    birthdate?: SortOrder
    description?: SortOrder
    is_banned?: SortOrder
    is_active?: SortOrder
    is_moderator?: SortOrder
    zip_code?: SortOrder
    state?: SortOrder
    city?: SortOrder
    street?: SortOrder
    number?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    fullname?: SortOrder
    username?: SortOrder
    created_at?: SortOrder
    email?: SortOrder
    user_img?: SortOrder
    bg_img?: SortOrder
    password?: SortOrder
    sc_number?: SortOrder
    telephone?: SortOrder
    birthdate?: SortOrder
    description?: SortOrder
    is_banned?: SortOrder
    is_active?: SortOrder
    is_moderator?: SortOrder
    zip_code?: SortOrder
    state?: SortOrder
    city?: SortOrder
    street?: SortOrder
    number?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type PostsNullableRelationFilter = {
    is?: PostsWhereInput | null
    isNot?: PostsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ThreadsCountOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    edited?: SortOrder
    description?: SortOrder
    comment_img?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ThreadsAvgOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ThreadsMaxOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    edited?: SortOrder
    description?: SortOrder
    comment_img?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ThreadsMinOrderByAggregateInput = {
    id?: SortOrder
    created_at?: SortOrder
    edited?: SortOrder
    description?: SortOrder
    comment_img?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type ThreadsSumOrderByAggregateInput = {
    id?: SortOrder
    post_id?: SortOrder
    user_id?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UsersRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type PostsCountOrderByAggregateInput = {
    id?: SortOrder
    posted_at?: SortOrder
    user_id?: SortOrder
    description?: SortOrder
    post_img?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
  }

  export type PostsAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
  }

  export type PostsMaxOrderByAggregateInput = {
    id?: SortOrder
    posted_at?: SortOrder
    user_id?: SortOrder
    description?: SortOrder
    post_img?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
  }

  export type PostsMinOrderByAggregateInput = {
    id?: SortOrder
    posted_at?: SortOrder
    user_id?: SortOrder
    description?: SortOrder
    post_img?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
  }

  export type PostsSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    likes?: SortOrder
    dislikes?: SortOrder
  }

  export type UsersCreateNestedOneWithoutFollowersInput = {
    create?: XOR<UsersCreateWithoutFollowersInput, UsersUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFollowersInput
    connect?: UsersWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UsersUpdateOneWithoutFollowersNestedInput = {
    create?: XOR<UsersCreateWithoutFollowersInput, UsersUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: UsersCreateOrConnectWithoutFollowersInput
    upsert?: UsersUpsertWithoutFollowersInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutFollowersInput, UsersUpdateWithoutFollowersInput>, UsersUncheckedUpdateWithoutFollowersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostsCreateNestedManyWithoutUser_postInput = {
    create?: XOR<PostsCreateWithoutUser_postInput, PostsUncheckedCreateWithoutUser_postInput> | PostsCreateWithoutUser_postInput[] | PostsUncheckedCreateWithoutUser_postInput[]
    connectOrCreate?: PostsCreateOrConnectWithoutUser_postInput | PostsCreateOrConnectWithoutUser_postInput[]
    createMany?: PostsCreateManyUser_postInputEnvelope
    connect?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
  }

  export type ThreadsCreateNestedManyWithoutUserInput = {
    create?: XOR<ThreadsCreateWithoutUserInput, ThreadsUncheckedCreateWithoutUserInput> | ThreadsCreateWithoutUserInput[] | ThreadsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadsCreateOrConnectWithoutUserInput | ThreadsCreateOrConnectWithoutUserInput[]
    createMany?: ThreadsCreateManyUserInputEnvelope
    connect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
  }

  export type FollowersCreateNestedManyWithoutUserInput = {
    create?: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput> | FollowersCreateWithoutUserInput[] | FollowersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutUserInput | FollowersCreateOrConnectWithoutUserInput[]
    createMany?: FollowersCreateManyUserInputEnvelope
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
  }

  export type PostsUncheckedCreateNestedManyWithoutUser_postInput = {
    create?: XOR<PostsCreateWithoutUser_postInput, PostsUncheckedCreateWithoutUser_postInput> | PostsCreateWithoutUser_postInput[] | PostsUncheckedCreateWithoutUser_postInput[]
    connectOrCreate?: PostsCreateOrConnectWithoutUser_postInput | PostsCreateOrConnectWithoutUser_postInput[]
    createMany?: PostsCreateManyUser_postInputEnvelope
    connect?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
  }

  export type ThreadsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ThreadsCreateWithoutUserInput, ThreadsUncheckedCreateWithoutUserInput> | ThreadsCreateWithoutUserInput[] | ThreadsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadsCreateOrConnectWithoutUserInput | ThreadsCreateOrConnectWithoutUserInput[]
    createMany?: ThreadsCreateManyUserInputEnvelope
    connect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
  }

  export type FollowersUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput> | FollowersCreateWithoutUserInput[] | FollowersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutUserInput | FollowersCreateOrConnectWithoutUserInput[]
    createMany?: FollowersCreateManyUserInputEnvelope
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PostsUpdateManyWithoutUser_postNestedInput = {
    create?: XOR<PostsCreateWithoutUser_postInput, PostsUncheckedCreateWithoutUser_postInput> | PostsCreateWithoutUser_postInput[] | PostsUncheckedCreateWithoutUser_postInput[]
    connectOrCreate?: PostsCreateOrConnectWithoutUser_postInput | PostsCreateOrConnectWithoutUser_postInput[]
    upsert?: PostsUpsertWithWhereUniqueWithoutUser_postInput | PostsUpsertWithWhereUniqueWithoutUser_postInput[]
    createMany?: PostsCreateManyUser_postInputEnvelope
    set?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
    disconnect?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
    delete?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
    connect?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
    update?: PostsUpdateWithWhereUniqueWithoutUser_postInput | PostsUpdateWithWhereUniqueWithoutUser_postInput[]
    updateMany?: PostsUpdateManyWithWhereWithoutUser_postInput | PostsUpdateManyWithWhereWithoutUser_postInput[]
    deleteMany?: PostsScalarWhereInput | PostsScalarWhereInput[]
  }

  export type ThreadsUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThreadsCreateWithoutUserInput, ThreadsUncheckedCreateWithoutUserInput> | ThreadsCreateWithoutUserInput[] | ThreadsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadsCreateOrConnectWithoutUserInput | ThreadsCreateOrConnectWithoutUserInput[]
    upsert?: ThreadsUpsertWithWhereUniqueWithoutUserInput | ThreadsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThreadsCreateManyUserInputEnvelope
    set?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    disconnect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    delete?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    connect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    update?: ThreadsUpdateWithWhereUniqueWithoutUserInput | ThreadsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThreadsUpdateManyWithWhereWithoutUserInput | ThreadsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThreadsScalarWhereInput | ThreadsScalarWhereInput[]
  }

  export type FollowersUpdateManyWithoutUserNestedInput = {
    create?: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput> | FollowersCreateWithoutUserInput[] | FollowersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutUserInput | FollowersCreateOrConnectWithoutUserInput[]
    upsert?: FollowersUpsertWithWhereUniqueWithoutUserInput | FollowersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FollowersCreateManyUserInputEnvelope
    set?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    disconnect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    delete?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    update?: FollowersUpdateWithWhereUniqueWithoutUserInput | FollowersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FollowersUpdateManyWithWhereWithoutUserInput | FollowersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
  }

  export type PostsUncheckedUpdateManyWithoutUser_postNestedInput = {
    create?: XOR<PostsCreateWithoutUser_postInput, PostsUncheckedCreateWithoutUser_postInput> | PostsCreateWithoutUser_postInput[] | PostsUncheckedCreateWithoutUser_postInput[]
    connectOrCreate?: PostsCreateOrConnectWithoutUser_postInput | PostsCreateOrConnectWithoutUser_postInput[]
    upsert?: PostsUpsertWithWhereUniqueWithoutUser_postInput | PostsUpsertWithWhereUniqueWithoutUser_postInput[]
    createMany?: PostsCreateManyUser_postInputEnvelope
    set?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
    disconnect?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
    delete?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
    connect?: PostsWhereUniqueInput | PostsWhereUniqueInput[]
    update?: PostsUpdateWithWhereUniqueWithoutUser_postInput | PostsUpdateWithWhereUniqueWithoutUser_postInput[]
    updateMany?: PostsUpdateManyWithWhereWithoutUser_postInput | PostsUpdateManyWithWhereWithoutUser_postInput[]
    deleteMany?: PostsScalarWhereInput | PostsScalarWhereInput[]
  }

  export type ThreadsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ThreadsCreateWithoutUserInput, ThreadsUncheckedCreateWithoutUserInput> | ThreadsCreateWithoutUserInput[] | ThreadsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ThreadsCreateOrConnectWithoutUserInput | ThreadsCreateOrConnectWithoutUserInput[]
    upsert?: ThreadsUpsertWithWhereUniqueWithoutUserInput | ThreadsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ThreadsCreateManyUserInputEnvelope
    set?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    disconnect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    delete?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    connect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    update?: ThreadsUpdateWithWhereUniqueWithoutUserInput | ThreadsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ThreadsUpdateManyWithWhereWithoutUserInput | ThreadsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ThreadsScalarWhereInput | ThreadsScalarWhereInput[]
  }

  export type FollowersUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput> | FollowersCreateWithoutUserInput[] | FollowersUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FollowersCreateOrConnectWithoutUserInput | FollowersCreateOrConnectWithoutUserInput[]
    upsert?: FollowersUpsertWithWhereUniqueWithoutUserInput | FollowersUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FollowersCreateManyUserInputEnvelope
    set?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    disconnect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    delete?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    connect?: FollowersWhereUniqueInput | FollowersWhereUniqueInput[]
    update?: FollowersUpdateWithWhereUniqueWithoutUserInput | FollowersUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FollowersUpdateManyWithWhereWithoutUserInput | FollowersUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
  }

  export type PostsCreateNestedOneWithoutThreadsInput = {
    create?: XOR<PostsCreateWithoutThreadsInput, PostsUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: PostsCreateOrConnectWithoutThreadsInput
    connect?: PostsWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutThreadsInput = {
    create?: XOR<UsersCreateWithoutThreadsInput, UsersUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutThreadsInput
    connect?: UsersWhereUniqueInput
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PostsUpdateOneWithoutThreadsNestedInput = {
    create?: XOR<PostsCreateWithoutThreadsInput, PostsUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: PostsCreateOrConnectWithoutThreadsInput
    upsert?: PostsUpsertWithoutThreadsInput
    disconnect?: PostsWhereInput | boolean
    delete?: PostsWhereInput | boolean
    connect?: PostsWhereUniqueInput
    update?: XOR<XOR<PostsUpdateToOneWithWhereWithoutThreadsInput, PostsUpdateWithoutThreadsInput>, PostsUncheckedUpdateWithoutThreadsInput>
  }

  export type UsersUpdateOneWithoutThreadsNestedInput = {
    create?: XOR<UsersCreateWithoutThreadsInput, UsersUncheckedCreateWithoutThreadsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutThreadsInput
    upsert?: UsersUpsertWithoutThreadsInput
    disconnect?: UsersWhereInput | boolean
    delete?: UsersWhereInput | boolean
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutThreadsInput, UsersUpdateWithoutThreadsInput>, UsersUncheckedUpdateWithoutThreadsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UsersCreateNestedOneWithoutPostsInput = {
    create?: XOR<UsersCreateWithoutPostsInput, UsersUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPostsInput
    connect?: UsersWhereUniqueInput
  }

  export type ThreadsCreateNestedManyWithoutPostsInput = {
    create?: XOR<ThreadsCreateWithoutPostsInput, ThreadsUncheckedCreateWithoutPostsInput> | ThreadsCreateWithoutPostsInput[] | ThreadsUncheckedCreateWithoutPostsInput[]
    connectOrCreate?: ThreadsCreateOrConnectWithoutPostsInput | ThreadsCreateOrConnectWithoutPostsInput[]
    createMany?: ThreadsCreateManyPostsInputEnvelope
    connect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
  }

  export type ThreadsUncheckedCreateNestedManyWithoutPostsInput = {
    create?: XOR<ThreadsCreateWithoutPostsInput, ThreadsUncheckedCreateWithoutPostsInput> | ThreadsCreateWithoutPostsInput[] | ThreadsUncheckedCreateWithoutPostsInput[]
    connectOrCreate?: ThreadsCreateOrConnectWithoutPostsInput | ThreadsCreateOrConnectWithoutPostsInput[]
    createMany?: ThreadsCreateManyPostsInputEnvelope
    connect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
  }

  export type UsersUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UsersCreateWithoutPostsInput, UsersUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPostsInput
    upsert?: UsersUpsertWithoutPostsInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutPostsInput, UsersUpdateWithoutPostsInput>, UsersUncheckedUpdateWithoutPostsInput>
  }

  export type ThreadsUpdateManyWithoutPostsNestedInput = {
    create?: XOR<ThreadsCreateWithoutPostsInput, ThreadsUncheckedCreateWithoutPostsInput> | ThreadsCreateWithoutPostsInput[] | ThreadsUncheckedCreateWithoutPostsInput[]
    connectOrCreate?: ThreadsCreateOrConnectWithoutPostsInput | ThreadsCreateOrConnectWithoutPostsInput[]
    upsert?: ThreadsUpsertWithWhereUniqueWithoutPostsInput | ThreadsUpsertWithWhereUniqueWithoutPostsInput[]
    createMany?: ThreadsCreateManyPostsInputEnvelope
    set?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    disconnect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    delete?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    connect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    update?: ThreadsUpdateWithWhereUniqueWithoutPostsInput | ThreadsUpdateWithWhereUniqueWithoutPostsInput[]
    updateMany?: ThreadsUpdateManyWithWhereWithoutPostsInput | ThreadsUpdateManyWithWhereWithoutPostsInput[]
    deleteMany?: ThreadsScalarWhereInput | ThreadsScalarWhereInput[]
  }

  export type ThreadsUncheckedUpdateManyWithoutPostsNestedInput = {
    create?: XOR<ThreadsCreateWithoutPostsInput, ThreadsUncheckedCreateWithoutPostsInput> | ThreadsCreateWithoutPostsInput[] | ThreadsUncheckedCreateWithoutPostsInput[]
    connectOrCreate?: ThreadsCreateOrConnectWithoutPostsInput | ThreadsCreateOrConnectWithoutPostsInput[]
    upsert?: ThreadsUpsertWithWhereUniqueWithoutPostsInput | ThreadsUpsertWithWhereUniqueWithoutPostsInput[]
    createMany?: ThreadsCreateManyPostsInputEnvelope
    set?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    disconnect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    delete?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    connect?: ThreadsWhereUniqueInput | ThreadsWhereUniqueInput[]
    update?: ThreadsUpdateWithWhereUniqueWithoutPostsInput | ThreadsUpdateWithWhereUniqueWithoutPostsInput[]
    updateMany?: ThreadsUpdateManyWithWhereWithoutPostsInput | ThreadsUpdateManyWithWhereWithoutPostsInput[]
    deleteMany?: ThreadsScalarWhereInput | ThreadsScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type UsersCreateWithoutFollowersInput = {
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    posts?: PostsCreateNestedManyWithoutUser_postInput
    threads?: ThreadsCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutFollowersInput = {
    id?: number
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    posts?: PostsUncheckedCreateNestedManyWithoutUser_postInput
    threads?: ThreadsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutFollowersInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutFollowersInput, UsersUncheckedCreateWithoutFollowersInput>
  }

  export type UsersUpsertWithoutFollowersInput = {
    update: XOR<UsersUpdateWithoutFollowersInput, UsersUncheckedUpdateWithoutFollowersInput>
    create: XOR<UsersCreateWithoutFollowersInput, UsersUncheckedCreateWithoutFollowersInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutFollowersInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutFollowersInput, UsersUncheckedUpdateWithoutFollowersInput>
  }

  export type UsersUpdateWithoutFollowersInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    posts?: PostsUpdateManyWithoutUser_postNestedInput
    threads?: ThreadsUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutFollowersInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    posts?: PostsUncheckedUpdateManyWithoutUser_postNestedInput
    threads?: ThreadsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostsCreateWithoutUser_postInput = {
    posted_at?: Date | string
    description?: string | null
    post_img?: string | null
    likes: number
    dislikes: number
    threads?: ThreadsCreateNestedManyWithoutPostsInput
  }

  export type PostsUncheckedCreateWithoutUser_postInput = {
    id?: number
    posted_at?: Date | string
    description?: string | null
    post_img?: string | null
    likes: number
    dislikes: number
    threads?: ThreadsUncheckedCreateNestedManyWithoutPostsInput
  }

  export type PostsCreateOrConnectWithoutUser_postInput = {
    where: PostsWhereUniqueInput
    create: XOR<PostsCreateWithoutUser_postInput, PostsUncheckedCreateWithoutUser_postInput>
  }

  export type PostsCreateManyUser_postInputEnvelope = {
    data: PostsCreateManyUser_postInput | PostsCreateManyUser_postInput[]
    skipDuplicates?: boolean
  }

  export type ThreadsCreateWithoutUserInput = {
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    posts?: PostsCreateNestedOneWithoutThreadsInput
  }

  export type ThreadsUncheckedCreateWithoutUserInput = {
    id?: number
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    post_id?: number | null
  }

  export type ThreadsCreateOrConnectWithoutUserInput = {
    where: ThreadsWhereUniqueInput
    create: XOR<ThreadsCreateWithoutUserInput, ThreadsUncheckedCreateWithoutUserInput>
  }

  export type ThreadsCreateManyUserInputEnvelope = {
    data: ThreadsCreateManyUserInput | ThreadsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FollowersCreateWithoutUserInput = {
    is_following: boolean
  }

  export type FollowersUncheckedCreateWithoutUserInput = {
    id?: number
    is_following: boolean
  }

  export type FollowersCreateOrConnectWithoutUserInput = {
    where: FollowersWhereUniqueInput
    create: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput>
  }

  export type FollowersCreateManyUserInputEnvelope = {
    data: FollowersCreateManyUserInput | FollowersCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostsUpsertWithWhereUniqueWithoutUser_postInput = {
    where: PostsWhereUniqueInput
    update: XOR<PostsUpdateWithoutUser_postInput, PostsUncheckedUpdateWithoutUser_postInput>
    create: XOR<PostsCreateWithoutUser_postInput, PostsUncheckedCreateWithoutUser_postInput>
  }

  export type PostsUpdateWithWhereUniqueWithoutUser_postInput = {
    where: PostsWhereUniqueInput
    data: XOR<PostsUpdateWithoutUser_postInput, PostsUncheckedUpdateWithoutUser_postInput>
  }

  export type PostsUpdateManyWithWhereWithoutUser_postInput = {
    where: PostsScalarWhereInput
    data: XOR<PostsUpdateManyMutationInput, PostsUncheckedUpdateManyWithoutUser_postInput>
  }

  export type PostsScalarWhereInput = {
    AND?: PostsScalarWhereInput | PostsScalarWhereInput[]
    OR?: PostsScalarWhereInput[]
    NOT?: PostsScalarWhereInput | PostsScalarWhereInput[]
    id?: IntFilter<"Posts"> | number
    posted_at?: DateTimeFilter<"Posts"> | Date | string
    user_id?: IntFilter<"Posts"> | number
    description?: StringNullableFilter<"Posts"> | string | null
    post_img?: StringNullableFilter<"Posts"> | string | null
    likes?: IntFilter<"Posts"> | number
    dislikes?: IntFilter<"Posts"> | number
  }

  export type ThreadsUpsertWithWhereUniqueWithoutUserInput = {
    where: ThreadsWhereUniqueInput
    update: XOR<ThreadsUpdateWithoutUserInput, ThreadsUncheckedUpdateWithoutUserInput>
    create: XOR<ThreadsCreateWithoutUserInput, ThreadsUncheckedCreateWithoutUserInput>
  }

  export type ThreadsUpdateWithWhereUniqueWithoutUserInput = {
    where: ThreadsWhereUniqueInput
    data: XOR<ThreadsUpdateWithoutUserInput, ThreadsUncheckedUpdateWithoutUserInput>
  }

  export type ThreadsUpdateManyWithWhereWithoutUserInput = {
    where: ThreadsScalarWhereInput
    data: XOR<ThreadsUpdateManyMutationInput, ThreadsUncheckedUpdateManyWithoutUserInput>
  }

  export type ThreadsScalarWhereInput = {
    AND?: ThreadsScalarWhereInput | ThreadsScalarWhereInput[]
    OR?: ThreadsScalarWhereInput[]
    NOT?: ThreadsScalarWhereInput | ThreadsScalarWhereInput[]
    id?: IntFilter<"Threads"> | number
    created_at?: DateTimeFilter<"Threads"> | Date | string
    edited?: BoolNullableFilter<"Threads"> | boolean | null
    description?: StringNullableFilter<"Threads"> | string | null
    comment_img?: StringNullableFilter<"Threads"> | string | null
    post_id?: IntNullableFilter<"Threads"> | number | null
    user_id?: IntNullableFilter<"Threads"> | number | null
  }

  export type FollowersUpsertWithWhereUniqueWithoutUserInput = {
    where: FollowersWhereUniqueInput
    update: XOR<FollowersUpdateWithoutUserInput, FollowersUncheckedUpdateWithoutUserInput>
    create: XOR<FollowersCreateWithoutUserInput, FollowersUncheckedCreateWithoutUserInput>
  }

  export type FollowersUpdateWithWhereUniqueWithoutUserInput = {
    where: FollowersWhereUniqueInput
    data: XOR<FollowersUpdateWithoutUserInput, FollowersUncheckedUpdateWithoutUserInput>
  }

  export type FollowersUpdateManyWithWhereWithoutUserInput = {
    where: FollowersScalarWhereInput
    data: XOR<FollowersUpdateManyMutationInput, FollowersUncheckedUpdateManyWithoutUserInput>
  }

  export type FollowersScalarWhereInput = {
    AND?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
    OR?: FollowersScalarWhereInput[]
    NOT?: FollowersScalarWhereInput | FollowersScalarWhereInput[]
    id?: IntFilter<"Followers"> | number
    user_id?: IntFilter<"Followers"> | number
    is_following?: BoolFilter<"Followers"> | boolean
  }

  export type PostsCreateWithoutThreadsInput = {
    posted_at?: Date | string
    description?: string | null
    post_img?: string | null
    likes: number
    dislikes: number
    user_post: UsersCreateNestedOneWithoutPostsInput
  }

  export type PostsUncheckedCreateWithoutThreadsInput = {
    id?: number
    posted_at?: Date | string
    user_id: number
    description?: string | null
    post_img?: string | null
    likes: number
    dislikes: number
  }

  export type PostsCreateOrConnectWithoutThreadsInput = {
    where: PostsWhereUniqueInput
    create: XOR<PostsCreateWithoutThreadsInput, PostsUncheckedCreateWithoutThreadsInput>
  }

  export type UsersCreateWithoutThreadsInput = {
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    posts?: PostsCreateNestedManyWithoutUser_postInput
    followers?: FollowersCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutThreadsInput = {
    id?: number
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    posts?: PostsUncheckedCreateNestedManyWithoutUser_postInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutThreadsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutThreadsInput, UsersUncheckedCreateWithoutThreadsInput>
  }

  export type PostsUpsertWithoutThreadsInput = {
    update: XOR<PostsUpdateWithoutThreadsInput, PostsUncheckedUpdateWithoutThreadsInput>
    create: XOR<PostsCreateWithoutThreadsInput, PostsUncheckedCreateWithoutThreadsInput>
    where?: PostsWhereInput
  }

  export type PostsUpdateToOneWithWhereWithoutThreadsInput = {
    where?: PostsWhereInput
    data: XOR<PostsUpdateWithoutThreadsInput, PostsUncheckedUpdateWithoutThreadsInput>
  }

  export type PostsUpdateWithoutThreadsInput = {
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    user_post?: UsersUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostsUncheckedUpdateWithoutThreadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    user_id?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
  }

  export type UsersUpsertWithoutThreadsInput = {
    update: XOR<UsersUpdateWithoutThreadsInput, UsersUncheckedUpdateWithoutThreadsInput>
    create: XOR<UsersCreateWithoutThreadsInput, UsersUncheckedCreateWithoutThreadsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutThreadsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutThreadsInput, UsersUncheckedUpdateWithoutThreadsInput>
  }

  export type UsersUpdateWithoutThreadsInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    posts?: PostsUpdateManyWithoutUser_postNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutThreadsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    posts?: PostsUncheckedUpdateManyWithoutUser_postNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UsersCreateWithoutPostsInput = {
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    threads?: ThreadsCreateNestedManyWithoutUserInput
    followers?: FollowersCreateNestedManyWithoutUserInput
  }

  export type UsersUncheckedCreateWithoutPostsInput = {
    id?: number
    fullname: string
    username: string
    created_at?: Date | string
    email: string
    user_img: string
    bg_img: string
    password: string
    sc_number: string
    telephone: string
    birthdate: string
    description: string
    is_banned: boolean
    is_active: boolean
    is_moderator: boolean
    zip_code: string
    state: string
    city: string
    street: string
    number: string
    threads?: ThreadsUncheckedCreateNestedManyWithoutUserInput
    followers?: FollowersUncheckedCreateNestedManyWithoutUserInput
  }

  export type UsersCreateOrConnectWithoutPostsInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPostsInput, UsersUncheckedCreateWithoutPostsInput>
  }

  export type ThreadsCreateWithoutPostsInput = {
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    user?: UsersCreateNestedOneWithoutThreadsInput
  }

  export type ThreadsUncheckedCreateWithoutPostsInput = {
    id?: number
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    user_id?: number | null
  }

  export type ThreadsCreateOrConnectWithoutPostsInput = {
    where: ThreadsWhereUniqueInput
    create: XOR<ThreadsCreateWithoutPostsInput, ThreadsUncheckedCreateWithoutPostsInput>
  }

  export type ThreadsCreateManyPostsInputEnvelope = {
    data: ThreadsCreateManyPostsInput | ThreadsCreateManyPostsInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutPostsInput = {
    update: XOR<UsersUpdateWithoutPostsInput, UsersUncheckedUpdateWithoutPostsInput>
    create: XOR<UsersCreateWithoutPostsInput, UsersUncheckedCreateWithoutPostsInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutPostsInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutPostsInput, UsersUncheckedUpdateWithoutPostsInput>
  }

  export type UsersUpdateWithoutPostsInput = {
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    threads?: ThreadsUpdateManyWithoutUserNestedInput
    followers?: FollowersUpdateManyWithoutUserNestedInput
  }

  export type UsersUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fullname?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    user_img?: StringFieldUpdateOperationsInput | string
    bg_img?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sc_number?: StringFieldUpdateOperationsInput | string
    telephone?: StringFieldUpdateOperationsInput | string
    birthdate?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    is_banned?: BoolFieldUpdateOperationsInput | boolean
    is_active?: BoolFieldUpdateOperationsInput | boolean
    is_moderator?: BoolFieldUpdateOperationsInput | boolean
    zip_code?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    threads?: ThreadsUncheckedUpdateManyWithoutUserNestedInput
    followers?: FollowersUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ThreadsUpsertWithWhereUniqueWithoutPostsInput = {
    where: ThreadsWhereUniqueInput
    update: XOR<ThreadsUpdateWithoutPostsInput, ThreadsUncheckedUpdateWithoutPostsInput>
    create: XOR<ThreadsCreateWithoutPostsInput, ThreadsUncheckedCreateWithoutPostsInput>
  }

  export type ThreadsUpdateWithWhereUniqueWithoutPostsInput = {
    where: ThreadsWhereUniqueInput
    data: XOR<ThreadsUpdateWithoutPostsInput, ThreadsUncheckedUpdateWithoutPostsInput>
  }

  export type ThreadsUpdateManyWithWhereWithoutPostsInput = {
    where: ThreadsScalarWhereInput
    data: XOR<ThreadsUpdateManyMutationInput, ThreadsUncheckedUpdateManyWithoutPostsInput>
  }

  export type PostsCreateManyUser_postInput = {
    id?: number
    posted_at?: Date | string
    description?: string | null
    post_img?: string | null
    likes: number
    dislikes: number
  }

  export type ThreadsCreateManyUserInput = {
    id?: number
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    post_id?: number | null
  }

  export type FollowersCreateManyUserInput = {
    id?: number
    is_following: boolean
  }

  export type PostsUpdateWithoutUser_postInput = {
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    threads?: ThreadsUpdateManyWithoutPostsNestedInput
  }

  export type PostsUncheckedUpdateWithoutUser_postInput = {
    id?: IntFieldUpdateOperationsInput | number
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
    threads?: ThreadsUncheckedUpdateManyWithoutPostsNestedInput
  }

  export type PostsUncheckedUpdateManyWithoutUser_postInput = {
    id?: IntFieldUpdateOperationsInput | number
    posted_at?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    post_img?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: IntFieldUpdateOperationsInput | number
    dislikes?: IntFieldUpdateOperationsInput | number
  }

  export type ThreadsUpdateWithoutUserInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    posts?: PostsUpdateOneWithoutThreadsNestedInput
  }

  export type ThreadsUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    post_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ThreadsUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    post_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FollowersUpdateWithoutUserInput = {
    is_following?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FollowersUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    is_following?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FollowersUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    is_following?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ThreadsCreateManyPostsInput = {
    id?: number
    created_at?: Date | string
    edited?: boolean | null
    description?: string | null
    comment_img?: string | null
    user_id?: number | null
  }

  export type ThreadsUpdateWithoutPostsInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UsersUpdateOneWithoutThreadsNestedInput
  }

  export type ThreadsUncheckedUpdateWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ThreadsUncheckedUpdateManyWithoutPostsInput = {
    id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    edited?: NullableBoolFieldUpdateOperationsInput | boolean | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    comment_img?: NullableStringFieldUpdateOperationsInput | string | null
    user_id?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostsCountOutputTypeDefaultArgs instead
     */
    export type PostsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PostsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FollowersDefaultArgs instead
     */
    export type FollowersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = FollowersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UsersDefaultArgs instead
     */
    export type UsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ThreadsDefaultArgs instead
     */
    export type ThreadsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ThreadsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostsDefaultArgs instead
     */
    export type PostsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = PostsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}