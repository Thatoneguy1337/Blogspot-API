// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Users {
  id             Int        @id @default(autoincrement())
  fullname       String     @db.VarChar(127)
  username       String     @db.VarChar(127)
  created_at     DateTime   @default(now())
  email          String     @unique @db.VarChar(127)
  user_img       String     @db.VarChar(270)
  bg_img         String     @db.VarChar(270)
  password       String     @db.VarChar(60)
  reset_password String?    @db.VarChar(127)
  ssc_number     String     @unique @db.VarChar(11)
  telephone      String     @db.VarChar(11)
  birthdate      String     @db.VarChar(10)
  description    String     @db.Text()
  is_banned      Boolean    @db.Boolean()
  is_moderator   Boolean    @db.Boolean()
  zip_code       String     @db.VarChar(8)
  state          String     @db.VarChar(127)
  city           String     @db.VarChar(127)
  street         String     @db.VarChar(127)
  number         String     @db.VarChar(127)
  posts          Posts[]
  threads        Threads[]
  followers      Followers[] @relation("UserFollowers")
  following      Followers[] @relation("UserFollowing")

  @@map("users")
}

model Followers {
  id          Int      @id @default(autoincrement())
  followerId  Int?
  follower    Users?    @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  followingId Int?
  following   Users?    @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@map("followers")
}



model Threads {
  id          Int      @id @default(autoincrement())
  created_at  DateTime @default(now())
  edited      Boolean? @db.Boolean() @default(false)
  description String?  @db.Text()
  comment_img String?  @db.VarChar(270)
  posts       Posts?   @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id     Int?
  user        Users?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int?

  @@map("threads")
}





model Posts {
  id          Int   @id @default(autoincrement())
  posted_at   DateTime @default(now())
  user_post   Users @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     Int 
  description String?   @db.Text()
  post_img    String?   @db.VarChar()
  likes       Int       @db.Integer()
  dislikes    Int       @db.Integer()
  threads     Threads[]      
  
  @@map("posts")
}




